@startuml "Order Taking Classes"

class Company
{
	companyAdmin : Admin
	branchCounter : Integer
	customerCounter : Integer
	employeeCounter : Integer
	branches : List<Branch>
	employees : List<Employee>
	subs : List<Customer>
	stocks : List<Stock>

	Company(Admin)
	Employee login(Employee)
	Customer login(Customer)
	void showBranchIds()
	void showAllProducts()
	void showSingleBranch(Integer)
	Admin getAdmin()
	Integer getBranchCounter()
	Integer getCustomerCounter()
	Integer getEmployeeCounter()
	void setCounter(Integer)
	List<Branch> getBranches()
	List<Employee> getEmployees()
	List<Stock> getStocks()
	List<Customer> getSubs()
	String toString()
}

class Branch
{
	branchId : Integer 
	stockIndex : Integer

	Branch(Integer, Integer)
	Integer getBranchId()
	Integer getStockIndex()
}

class Stock
{
	id : Integer
	furnArr : List<Furniture>
	Stock(Integer, List<Furniture>)
	Integer getId()
	List<Furniture> getFurnitures()
}

class Admin
{
	Admin(String, String, String, String, Company)
	Admin(String, String, String, String)
	boolean addBranch()
	boolean removeBranch(Integer)
	boolean addBranchEmployee(Employee)
	boolean removeBranchEmployee(Integer
	void listEmployees()
	void listSubscribers()
}

interface CompanyMembersInterface {

	void productsNeedToBeSupplied();

	void addCustomer(Customer);
	void removeCustomer(Integer);

	void addProducts(Integer, Integer, Integer);
	void removeProducts(Integer, Integer, Integer);
	
}

class CompanyMembers
{
	CompanyMembers(String, String, String, String)
	CompanyMembers(String, String, String, String, Company)
	
	void productsNeedToBeSupplied()
	void addCustomer(Customer);
	void removeCustomer(Integer);
	void addProducts(Integer, Integer, Integer);
	void removeProducts(Integer, Integer, Integer);

}

class Customer
{
	List<Stock> orderHistory
	boolean isSubscribed
	Integer counter

	Customer(String, String, Company)
	Customer(String, String, String, String, Company)
	void subscribe()
	boolean login()
	void buyOnline(Integer productId, Integer amount)
	void buyInShop(Integer branchId, Integer productId, Integer amount)
	void showOrderHistory()
	void addNewOrder(Stock newOrder)
	Integer getCounter()


}

class Employee
{
	Integer branchId

	Employee(Integer, String, String surname, String, String, Integer, Company)
	Employee(String name, String, String, String, Integer, Company)
	' addProducts(Integer, Integer, Integer)
	' void removeProducts(Integer, Integer, Integer)
	void sell(Integer, Integer, Integer)
	' void productsNeedToBeSupplied()
	' void addCustomer(Customer)
	' void removeCustomer(Integer)
	boolean equals(Object)
}

class User
{
	Integer id
	String name
	String surname
	String mail
	String password

	User(String, String, String, String)
	User(String, String, String, String, Company)
	User(String, String, Company)
	Integer getId()
	String getName()
	String getSurname()
	String getMail()
	String getPassword()
	void setId(Integer id)
	void setName(String name)
	void setSurname(String surname)
	void setMail(String mail)
	void setPassword(String password)
	String toString()
}

enum Color
{
	RED
	GREEN
	BLUE
	ORANGE
	YELLOW
	NONE
}

enum Type {

	CHAIR
	DESK
	TABLE
	BOOKCASE
	CABINET
	
}

class Furniture
{
	Integer id
	Integer modelId
	Type type
	Color color
	Branch branch
	Integer amount

	Furniture(Integer, Integer, Type, Color, Branch, Integer)
	Integer getTotal()
	void setTotal(Integer)
	Integer getModelId()
	Type getType()
	Color getColor()
	Branch getBranch()
	String toString()
}

class List< T > 
{
	Integer size;
	Integer cap;
	T[] arr;

	List()
	List(Integer cap)
	void insert(T val)
	void remove(Integer index)
	T get(Integer index)
	void set(Integer index, T val)
	Integer length()
	String toString()

}

interface ListInterface<T> {

	public void insert(T val);
	public void remove(Integer index);
	public Integer length();
	public T get(Integer index);
	public void set(Integer index, T val);
	
}



Branch --* Company
Employee --* Company
Customer --* Company
Stock --* Company
Admin --* Company
' Admin --|> User
' Employee --|> User
Admin --|> CompanyMembers
Employee --|> CompanyMembers
CompanyMembers ..|> CompanyMembersInterface
CompanyMembers --|> User

Customer --|> User
' Admin ..|> CompanyMembersInterface
List ..|> ListInterface
Furniture --* Stock
Color --* Furniture
Type --* Furniture
List --* Stock
List --* Customer
List --* Company






@enduml